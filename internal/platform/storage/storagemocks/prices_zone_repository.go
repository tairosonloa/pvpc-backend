// Code generated by mockery v2.32.4. DO NOT EDIT.

package storagemocks

import (
	context "context"
	pvpc "go-pvpc/internal"

	mock "github.com/stretchr/testify/mock"
)

// PricesZoneRepository is an autogenerated mock type for the PricesZoneRepository type
type PricesZoneRepository struct {
	mock.Mock
}

type PricesZoneRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PricesZoneRepository) EXPECT() *PricesZoneRepository_Expecter {
	return &PricesZoneRepository_Expecter{mock: &_m.Mock}
}

// GetAll provides a mock function with given fields: ctx
func (_m *PricesZoneRepository) GetAll(ctx context.Context) ([]pvpc.PricesZone, error) {
	ret := _m.Called(ctx)

	var r0 []pvpc.PricesZone
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]pvpc.PricesZone, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []pvpc.PricesZone); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pvpc.PricesZone)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PricesZoneRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type PricesZoneRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PricesZoneRepository_Expecter) GetAll(ctx interface{}) *PricesZoneRepository_GetAll_Call {
	return &PricesZoneRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx)}
}

func (_c *PricesZoneRepository_GetAll_Call) Run(run func(ctx context.Context)) *PricesZoneRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PricesZoneRepository_GetAll_Call) Return(_a0 []pvpc.PricesZone, _a1 error) *PricesZoneRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PricesZoneRepository_GetAll_Call) RunAndReturn(run func(context.Context) ([]pvpc.PricesZone, error)) *PricesZoneRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// GetByExternalID provides a mock function with given fields: ctx, externalID
func (_m *PricesZoneRepository) GetByExternalID(ctx context.Context, externalID string) (pvpc.PricesZone, error) {
	ret := _m.Called(ctx, externalID)

	var r0 pvpc.PricesZone
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (pvpc.PricesZone, error)); ok {
		return rf(ctx, externalID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) pvpc.PricesZone); ok {
		r0 = rf(ctx, externalID)
	} else {
		r0 = ret.Get(0).(pvpc.PricesZone)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, externalID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PricesZoneRepository_GetByExternalID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByExternalID'
type PricesZoneRepository_GetByExternalID_Call struct {
	*mock.Call
}

// GetByExternalID is a helper method to define mock.On call
//   - ctx context.Context
//   - externalID string
func (_e *PricesZoneRepository_Expecter) GetByExternalID(ctx interface{}, externalID interface{}) *PricesZoneRepository_GetByExternalID_Call {
	return &PricesZoneRepository_GetByExternalID_Call{Call: _e.mock.On("GetByExternalID", ctx, externalID)}
}

func (_c *PricesZoneRepository_GetByExternalID_Call) Run(run func(ctx context.Context, externalID string)) *PricesZoneRepository_GetByExternalID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PricesZoneRepository_GetByExternalID_Call) Return(_a0 pvpc.PricesZone, _a1 error) *PricesZoneRepository_GetByExternalID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PricesZoneRepository_GetByExternalID_Call) RunAndReturn(run func(context.Context, string) (pvpc.PricesZone, error)) *PricesZoneRepository_GetByExternalID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *PricesZoneRepository) GetByID(ctx context.Context, id pvpc.PricesZoneID) (pvpc.PricesZone, error) {
	ret := _m.Called(ctx, id)

	var r0 pvpc.PricesZone
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, pvpc.PricesZoneID) (pvpc.PricesZone, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, pvpc.PricesZoneID) pvpc.PricesZone); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(pvpc.PricesZone)
	}

	if rf, ok := ret.Get(1).(func(context.Context, pvpc.PricesZoneID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PricesZoneRepository_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type PricesZoneRepository_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id pvpc.PricesZoneID
func (_e *PricesZoneRepository_Expecter) GetByID(ctx interface{}, id interface{}) *PricesZoneRepository_GetByID_Call {
	return &PricesZoneRepository_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *PricesZoneRepository_GetByID_Call) Run(run func(ctx context.Context, id pvpc.PricesZoneID)) *PricesZoneRepository_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pvpc.PricesZoneID))
	})
	return _c
}

func (_c *PricesZoneRepository_GetByID_Call) Return(_a0 pvpc.PricesZone, _a1 error) *PricesZoneRepository_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PricesZoneRepository_GetByID_Call) RunAndReturn(run func(context.Context, pvpc.PricesZoneID) (pvpc.PricesZone, error)) *PricesZoneRepository_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewPricesZoneRepository creates a new instance of PricesZoneRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPricesZoneRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PricesZoneRepository {
	mock := &PricesZoneRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
